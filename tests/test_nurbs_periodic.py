import numpy as np
from mmcore.geom.nurbs import NURBSCurve

from mmcore.geom.curves.bspline import NURBSpline
import pytest


def test_nurbs_periodic():
    pts = np.array(
        [[148.39347323205118, -60.435505127468502, 0.0],
         [148.39347323205118, -60.435505127468502, 312.99479852664467],
         [15.867952362691028, -60.435505127468502, 312.99479852664467],
         [15.867952362691028, 79.868450977375943, 312.99479852664467],
         [127.81520754187642, 79.868450977375943, 312.99479852664467],
         [127.81520754187642, 263.24739314874569, 312.99479852664467],
         [225.93283148956732, 263.24739314874569, 312.99479852664467],
         [225.93283148956732, 178.59891945435234, 312.99479852664467],
         [336.65283186482787, 178.59891945435234, 312.99479852664467],
         [336.65283186482787, 64.991782255356810, 312.99479852664467]]
        )

    for i in range(3):
        nc = NURBSpline(pts, degree=i + 1)
        start, end = nc.interval()
        assert not np.allclose(nc.evaluate(start), nc.evaluate(end))
        assert not nc.is_periodic()
        assert not nc.is_closed()
        assert nc.is_open()

        nc.make_periodic()
        assert nc.is_periodic()
        assert nc.is_closed()
        assert not nc.is_open()
        start, end = nc.interval()
        assert np.allclose(nc.evaluate(start), nc.evaluate(end))
        assert np.allclose(nc.control_points[:nc.degree], nc.control_points[len(pts):])

#nc.make_periodic()
#pts1=nc(np.linspace(*nc.interval(),100)).tolist()
def test_nurbs_periodic_eval():
    pts = np.array([[-37.0, 14.0, 0.0],
                    [-27.0, -12.0, 0.0],
                    [-7.0, -2.0, 0.0],
                    [14.0, 2.0, 0.0],
                    [12.0, 23.0, 0.0]
                    ]
                   )
    evaluated_pts = np.array([[-25.333333333333336, -6.0, 0.0], [-23.752253171156013, -6.636342000356994, 0.0],
                              [-22.076612069234198, -6.942464449336586, 0.0],
                              [-20.315972369789232, -6.962991610638425, 0.0],
                              [-18.479896415042486, -6.74254774796216, 0.0],
                              [-16.57794654721531, -6.325757125007438, 0.0],
                              [-14.619685108529039, -5.7572440054739085, 0.0],
                              [-12.61467444120505, -5.081632653061224, 0.0],
                              [-10.57247688746469, -4.343547331469031, 0.0],
                              [-8.50265478952931, -3.5876123043969783, 0.0],
                              [-6.4147917392696385, -2.8583597537307317, 0.0],
                              [-4.322976254225127, -2.1808005167914692, 0.0],
                              [-2.251347936092379, -1.5363907328862378, 0.0],
                              [-0.22540636412831852, -0.9006933052271283, 0.0],
                              [1.7293488824101118, -0.24927113702623738, 0.0],
                              [3.587418224265968, 0.4423128685043372, 0.0],
                              [5.323302082182311, 1.198495808152499, 0.0], [6.911500876902197, 2.0437147787061507, 0.0],
                              [8.326515029168682, 3.002406876953195, 0.0], [9.542844959724828, 4.099009199681536, 0.0],
                              [10.534991089313689, 5.357165523435524, 0.0],
                              [11.277453838678326, 6.769679300291537, 0.0],
                              [11.744733628561796, 8.289291310026723, 0.0],
                              [11.911330879707153, 9.866064876596205, 0.0],
                              [11.751746012857454, 11.450063323955156, 0.0],
                              [11.240479448755766, 12.99134997605873, 0.0],
                              [10.352031608145134, 14.439988156862077, 0.0],
                              [9.060902911768613, 15.746041190320367, 0.0],
                              [7.34159378036928, 16.859572400388732, 0.0], [5.168604634690186, 17.730645111022337, 0.0],
                              [2.5214083134294882, 18.31161760830946, 0.0],
                              [-0.5461202390160617, 18.589187611737742, 0.0],
                              [-3.9228311899520345, 18.57648740462449, 0.0],
                              [-7.49610139766027, 18.287329259067224, 0.0],
                              [-11.153307720422609, 17.735525447163454, 0.0],
                              [-14.781827016520884, 16.934888241010697, 0.0],
                              [-18.269036144236942, 15.899229912706444, 0.0],
                              [-21.502311961852612, 14.642362734348222, 0.0],
                              [-24.36903132764977, 13.178098978033525, 0.0],
                              [-26.75657109991019, 11.520250915859885, 0.0],
                              [-28.566361238372902, 9.686257426752457, 0.0],
                              [-29.80369290573372, 7.720360280722037, 0.0],
                              [-30.52040816326531, 5.678814382896018, 0.0],
                              [-30.76856865195058, 3.6179313041334873, 0.0],
                              [-30.600236012772456, 1.5940226152935038, 0.0],
                              [-30.067471886713864, -0.3366001127648144, 0.0],
                              [-29.222337914757738, -2.117625309182404, 0.0],
                              [-28.116895737886992, -3.692741403100186, 0.0],
                              [-26.803206997084548, -5.005636823659078, 0.0], [-25.333333333333336, -6.0, 0.0]])
    nc1 = NURBSCurve(pts,degree=3)
    nc1.make_periodic()
    assert np.allclose(np.array(nc1.evaluate_multi(np.linspace(*nc1.interval()))),evaluated_pts)
