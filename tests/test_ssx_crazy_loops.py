import time

import numpy as np

from mmcore.geom.curves import NURBSpline
from mmcore.geom.surfaces import Ruled
from mmcore.numeric.intersection.surface_surface import surface_ppi

spiral_knots=np.array([0.0,0.0, 0.0, 0.0, 0.016666666666666666, 0.033333333333333333, 0.050000000000000003, 0.066666666666666666, 0.083333333333333329, 0.10000000000000001, 0.11666666666666667, 0.13333333333333333, 0.14999999999999999, 0.16666666666666666, 0.18333333333333332, 0.20000000000000001, 0.21666666666666667, 0.23333333333333334, 0.25, 0.26666666666666666, 0.28333333333333333, 0.29999999999999999, 0.31666666666666665, 0.33333333333333331, 0.34999999999999998, 0.36666666666666664, 0.3833333333333333, 0.40000000000000002, 0.41666666666666669, 0.43333333333333335, 0.45000000000000001, 0.46666666666666667, 0.48333333333333334, 0.5, 0.51666666666666661, 0.53333333333333333, 0.55000000000000004, 0.56666666666666665, 0.58333333333333337, 0.59999999999999998, 0.6166666666666667, 0.6333333333333333, 0.65000000000000002, 0.66666666666666663, 0.68333333333333335, 0.69999999999999996, 0.71666666666666667, 0.73333333333333328, 0.75, 0.76666666666666661, 0.78333333333333333, 0.80000000000000004, 0.81666666666666665, 0.83333333333333337, 0.84999999999999998, 0.8666666666666667, 0.8833333333333333, 0.90000000000000002, 0.91666666666666663, 0.93333333333333335, 0.94999999999999996, 0.96666666666666667, 0.98333333333333328, 1.0, 1.0166666666666666, 1.0333333333333332, 1.0500000000000000, 1.0666666666666667, 1.0833333333333333, 1.1000000000000001, 1.1166666666666667, 1.1333333333333333, 1.1499999999999999, 1.1666666666666667, 1.1833333333333333, 1.2000000000000000, 1.2166666666666666, 1.2333333333333334, 1.25, 1.2666666666666666, 1.2833333333333332, 1.3000000000000000, 1.3166666666666667, 1.3333333333333333, 1.3500000000000001, 1.3666666666666667, 1.3833333333333333, 1.3999999999999999, 1.4166666666666667, 1.4333333333333333, 1.4500000000000000, 1.4666666666666666, 1.4833333333333334, 1.5, 1.5166666666666666, 1.5333333333333332, 1.5500000000000000, 1.5666666666666667, 1.5833333333333333, 1.6000000000000001, 1.6166666666666667, 1.6333333333333333, 1.6499999999999999, 1.6666666666666667, 1.6833333333333333, 1.7000000000000000, 1.7166666666666666, 1.7333333333333334, 1.75, 1.7666666666666666, 1.7833333333333332, 1.8000000000000000, 1.8166666666666667, 1.8333333333333333, 1.8499999999999999, 1.8666666666666667, 1.8833333333333333, 1.8999999999999999, 1.9166666666666667, 1.9333333333333333, 1.9500000000000000, 1.9666666666666666, 1.9833333333333334, 2.0, 2.0166666666666666, 2.0333333333333332, 2.0499999999999998, 2.0666666666666664, 2.0833333333333335, 2.1000000000000001, 2.1166666666666667, 2.1333333333333333, 2.1499999999999999, 2.1666666666666665, 2.1833333333333331, 2.2000000000000002, 2.2166666666666668, 2.2333333333333334, 2.25, 2.2666666666666666, 2.2833333333333332, 2.2999999999999998, 2.3166666666666664, 2.3333333333333335, 2.3500000000000001, 2.3666666666666667, 2.3833333333333333, 2.3999999999999999, 2.4166666666666665, 2.4333333333333331, 2.4500000000000002, 2.4666666666666668, 2.4833333333333334, 2.5, 2.5166666666666666, 2.5333333333333332, 2.5499999999999998, 2.5666666666666669, 2.5833333333333335, 2.6000000000000001, 2.6166666666666667, 2.6333333333333333, 2.6499999999999999, 2.6666666666666665, 2.6833333333333336, 2.7000000000000002, 2.7166666666666668, 2.7333333333333334, 2.75, 2.7666666666666666, 2.7833333333333332, 2.7999999999999998, 2.8166666666666669, 2.8333333333333335, 2.8500000000000001, 2.8666666666666667, 2.8833333333333333, 2.8999999999999999, 2.9166666666666665, 2.9333333333333336, 2.9500000000000002, 2.9666666666666668, 2.9833333333333334, 3.0, 3.0166666666666666, 3.0333333333333332, 3.0499999999999998, 3.0666666666666669, 3.0833333333333335, 3.1000000000000001, 3.1166666666666667, 3.1333333333333333, 3.1499999999999999, 3.1666666666666665, 3.1833333333333336, 3.2000000000000002, 3.2166666666666668, 3.2333333333333334, 3.25, 3.2666666666666666, 3.2833333333333332, 3.2999999999999998, 3.3166666666666669, 3.3333333333333335, 3.3500000000000001, 3.3666666666666667, 3.3833333333333333, 3.3999999999999999, 3.4166666666666665, 3.4333333333333336, 3.4500000000000002, 3.4666666666666668, 3.4833333333333334, 3.5, 3.5166666666666666, 3.5333333333333332, 3.5499999999999998, 3.5666666666666669, 3.5833333333333335, 3.6000000000000001, 3.6166666666666667, 3.6333333333333333, 3.6499999999999999, 3.6666666666666665, 3.6833333333333336, 3.7000000000000002, 3.7166666666666668, 3.7333333333333334, 3.75, 3.7666666666666666, 3.7833333333333332, 3.7999999999999998, 3.8166666666666669, 3.8333333333333335, 3.8500000000000001, 3.8666666666666667, 3.8833333333333333, 3.8999999999999999, 3.9166666666666665, 3.9333333333333336, 3.9500000000000002, 3.9666666666666668, 3.9833333333333334, 4.0, 4.0166666666666666, 4.0333333333333332, 4.0499999999999998, 4.0666666666666664, 4.0833333333333330, 4.0999999999999996, 4.1166666666666663, 4.1333333333333337, 4.1500000000000004, 4.1666666666666670, 4.1833333333333336, 4.2000000000000002, 4.2166666666666668, 4.2333333333333334, 4.25, 4.2666666666666666, 4.2833333333333332, 4.2999999999999998, 4.3166666666666664, 4.3333333333333330, 4.3499999999999996, 4.3666666666666663, 4.3833333333333337, 4.4000000000000004, 4.4166666666666670, 4.4333333333333336, 4.4500000000000002, 4.4666666666666668, 4.4833333333333334, 4.5, 4.5166666666666666, 4.5333333333333332, 4.5499999999999998, 4.5666666666666664, 4.5833333333333330, 4.5999999999999996, 4.6166666666666663, 4.6333333333333337, 4.6500000000000004, 4.6666666666666670, 4.6833333333333336, 4.7000000000000002, 4.7166666666666668, 4.7333333333333334, 4.75, 4.7666666666666666, 4.7833333333333332, 4.7999999999999998, 4.8166666666666664, 4.8333333333333330, 4.8499999999999996, 4.8666666666666663, 4.8833333333333337, 4.9000000000000004, 4.9166666666666670, 4.9333333333333336, 4.9500000000000002, 4.9666666666666668, 4.9833333333333334, 5.0, 5.0, 5.0, 5.0]
                      )
spiral_cpts=np.array([[1804.4963736366426, -2573.4457090940496, -458.0], [1804.8457077281400, -2575.8001537378309, -458.0], [1805.8626146644492, -2580.5677472368470, -458.0], [1808.3829207353829, -2587.7686595942337, -458.0], [1811.9225970841399, -2594.8868183401628, -458.0], [1816.4888184891443, -2601.7855835491373, -458.0], [1822.0712105545590, -2608.3262640126013, -458.0], [1828.6414302637859, -2614.3702851504431, -458.0], [1836.1531433751625, -2619.7814519116200, -458.0], [1844.5422439549202, -2624.4282045323052, -458.0], [1853.7273592961392, -2628.1858526078408, -458.0], [1863.6106254678034, -2630.9387493499580, -458.0], [1874.0787293188205, -2632.5823746845053, -458.0], [1885.0042050340271, -2633.0252950694889, -458.0], [1896.2469706525717, -2632.1909697310166, -458.0], [1907.6560861218823, -2630.0193746881246, -458.0], [1919.0717111950198, -2626.4684181748498, -458.0], [1930.3272383835247, -2621.5151236476022, -458.0], [1941.2515734157259, -2615.1565595083975, -458.0], [1951.6715332291806, -2607.4104979293998, -458.0], [1961.4143294893929, -2598.3157886942890, -458.0], [1970.3101040035526, -2587.9324377313187, -458.0], [1978.1944812134770, -2576.3413839537534, -458.0], [1984.9111022260331, -2563.6439720946191, -458.0], [1990.3141045856482, -2549.9611233714595, -458.0], [1994.2705122202369, -2535.4322099885512, -458.0], [1996.6625007001276, -2520.2136436237615, -458.0], [1997.3895041349588, -2504.4771920996845, -458.0], [1996.3701316847983, -2488.4080423494224, -458.0], [1993.5438637618699, -2472.2026315033800, -458.0], [1988.8725005250544, -2456.0662713936226, -458.0], [1982.3413381918199, -2440.2105949486422, -458.0], [1973.9600519771884, -2424.8508557888590, -458.0], [1963.7632680774586, -2410.2031147911662, -458.0], [1951.8108110036901, -2396.4813494329351, -458.0], [1938.1876166888487, -2383.8945233211589, -458.0], [1923.0033060913629, -2372.6436544348544, -458.0], [1906.3914184429250, -2362.9189212389774, -458.0], [1888.5083077831205, -2354.8968459519656, -458.0], [1869.5317109307380, -2348.7375938596047, -458.0], [1849.6589995023405, -2344.5824266643076, -458.0], [1829.1051329454458, -2342.5513464470851, -458.0], [1808.1003337480324, -2342.7409649118481, -458.0], [1786.8875099627912, -2345.2226301971841, -458.0], [1765.7194538892309, -2350.0408407045616, -458.0], [1744.8558491390322, -2357.2119721353038, -458.0], [1724.5601213222053, -2366.7233402884990, -458.0], [1705.0961701911456, -2378.5326181905102, -458.0], [1686.7250232279584, -2392.5676218507651, -458.0], [1669.7014523249527, -2408.7264744193053, -458.0], [1654.2705963616136, -2426.8781538138810, -458.0], [1640.6646331031625, -2446.8634240458796, -458.0], [1629.0995439213348, -2468.4961455651933, -458.0], [1619.7720143598672, -2491.5649550256635, -458.0], [1612.8565125347577, -2515.8353000072707, -458.0], [1608.5025857787532, -2541.0518094811578, -458.0], [1606.8324138241987, -2566.9409762301584, -458.0], [1607.9386541885597, -2593.2141231009045, -458.0], [1611.8826123090712, -2619.5706209211285, -458.0], [1618.6927654008978, -2645.7013222222063, -458.0], [1628.3636650255648, -2671.2921716128467, -458.0], [1640.8552389987199, -2696.0279508015174, -458.0], [1656.0925085881136, -2719.5961139038559, -458.0], [1673.9657320088918, -2741.6906668325337, -458.0], [1694.3309800722054, -2762.0160432803164, -458.0], [1717.0111445465136, -2780.2909290952193, -458.0], [1741.7973744130250, -2796.2519867258152, -458.0], [1768.4509298032135, -2809.6574318935955, -458.0], [1796.7054380643513, -2820.2904157295206, -458.0], [1826.2695311751831, -2827.9621672873741, -458.0], [1856.8298386945589, -2832.5148536040892, -458.0], [1888.0543056356655, -2833.8241172959729, -458.0], [1919.5958001797444, -2831.8012550320182, -458.0], [1951.0959720349510, -2826.3950040763307, -458.0], [1982.1893185635454, -2817.5929084000554, -458.0], [2012.5074125946267, -2805.4222405814630, -458.0], [2041.6832431551429, -2789.9504607883473, -458.0], [2069.3556182287612, -2771.2851995115707, -458.0], [2095.1735771229305, -2749.5737563302682, -458.0], [2118.8007591154892, -2725.0021127721839, -458.0], [2139.9196747819551, -2697.7934632181432, -458.0], [2158.2358267846957, -2668.2062737171173, -458.0], [2173.4816279384286, -2636.5318844560547, -458.0], [2185.4200660488113, -2603.0916773942490, -458.0], [2193.8480673394115, -2568.2338361541929, -458.0], [2198.5995132168337, -2532.3297305893275, -458.0], [2199.5478686460483, -2495.7699634561168, -458.0], [2196.6083844824971, -2458.9601212387015, -458.0], [2189.7398406916345, -2422.3162753485158, -458.0], [2178.9458024309097, -2386.2602835924017, -458.0], [2164.2753664183929, -2351.2149449208791, -458.0], [2145.8233808053174, -2317.5990629885182, -458.0], [2123.7301278411578, -2285.8224759436234, -458.0], [2098.1804648993311, -2256.2811110839612, -458.0], [2069.4024258464760, -2229.3521235466274, -458.0], [2037.6652912126992, -2205.3891780285967, -458.0], [2003.2771420771624, -2184.7179316537104, -458.0], [1966.5819189452232, -2167.6317745140254, -458.0], [1927.9560130827522, -2154.3878821291887, -458.0], [1887.8044237134709, -2145.2036311058419, -458.0], [1846.5565201031168, -2140.2534256677095, -458.0], [1804.6614527778002, -2139.6659785011630, -458.0], [1762.5832628870521, -2143.5220845643107, -458.0], [1720.7957429618818, -2151.8529211903497, -458.0], [1679.7771059782535, -2164.6389020355209, -458.0], [1640.0045226662860, -2181.8091062419653, -458.0], [1601.9485893620822, -2203.2412976750006, -458.0], [1566.0677903459091, -2228.7625423265413, -458.0], [1532.8030195207539, -2258.1504250288949, -458.0], [1502.5722264386459, -2291.1348595765203, -458.0], [1475.7652510690532, -2327.4004792900278, -458.0], [1452.7389103220194, -2366.5895880600810, -458.0], [1433.8123971963832, -2408.3056450628919, -458.0], [1419.2630505370889, -2452.1172497260332, -458.0], [1409.3225497809963, -2497.5625872245382, -458.0], [1404.1735847821546, -2544.1542888803797, -458.0], [1403.9470458782780, -2591.3846563978045, -458.0], [1408.7197738410214, -2638.7311939618867, -458.0], [1418.5129033022367, -2685.6623879220360, -458.0], [1433.2908267318562, -2731.6436701331841, -458.0], [1452.9607991322264, -2776.1434980855911, -458.0], [1477.3731963852206, -2818.6394827616414, -458.0], [1506.3224327241442, -2858.6244937490919, -458.0], [1539.5485351870229, -2895.6126705397387, -458.0], [1576.7393652294195, -2929.1452691666236, -458.0], [1617.5334700226576, -2958.7962743877802, -458.0], [1661.5235384272273, -2984.1777095069601, -458.0], [1708.2604293009117, -3004.9445786185470, -458.0], [1757.2577327647195, -3020.7993795522980, -458.0], [1807.9968183924502, -3031.4961300411369, -458.0], [1859.9323180937809, -3036.8438546006864, -458.0], [1912.4979858033130, -3036.7094852418954, -458.0], [1965.1128710407265, -3031.0201353795555, -458.0], [2017.1877390358586, -3019.7647130831656, -458.0], [2068.1316664745245, -3002.9948470690956, -458.0], [2117.3587390673711, -2980.8251064748010, -458.0], [2164.2947751152678, -2953.4325034018461, -458.0], [2208.3839980739958, -2921.0552753755401, -458.0], [2249.0955808301333, -2883.9909531521389, -458.0], [2285.9299850017978, -2842.5937276149666, -458.0], [2318.4250200745155, -2797.2711377419982, -458.0], [2346.1615495658407, -2748.4801097029131, -458.0], [2368.7687746633801, -2696.7223849583588, -458.0], [2385.9290298715878, -2642.5393826938785, -458.0], [2397.3820300931729, -2586.5065489369254, -458.0], [2402.9285142134304, -2529.2272511901047, -458.0], [2402.4332365919709, -2471.3262832884711, -458.0], [2395.8272648300353, -2413.4430503777185, -458.0], [2383.1095496984690, -2356.2245083476078, -458.0], [2364.3477410999512, -2300.3179356814235, -458.0], [2339.6782323117295, -2246.3636184481352, -458.0], [2309.3054234188166, -2194.9875310283937, -458.0], [2273.5002037051290, -2146.7940960983879, -458.0], [2232.5976617211982, -2102.3591073767543, -458.0], [2186.9940406892601, -2062.2228976603205, -458.0], [2137.1429657365570, -2026.8838327360372, -458.0], [2083.5509780629582, -1996.7922088725654, -458.0], [2026.7724194475268, -1972.3446277890748, -458.0], [1967.4037183823802, -1953.8789183064114, -458.0], [1906.0771364962075, -1941.6696683520795, -458.0], [1843.4540407038912, -1935.9244246711119, -458.0], [1780.2177726101563, -1936.7806105552413, -458.0], [1717.0661920260700, -1944.3032042167727, -458.0], [1654.7039759609761, -1958.4832121835143, -458.0], [1593.8347580672762, -1979.2369633664812, -458.0], [1535.1531961935434, -2006.4062403486273, -458.0], [1479.3370574019573, -2039.7592550615018, -458.0], [1427.0394105006726, -2078.9924664625728, -458.0], [1378.8810158135511, -2123.7332282070233, -458.0], [1335.4430005523373, -2173.5432447337380, -458.0], [1297.2599057764892, -2227.9228047661750, -458.0], [1264.8131875408762, -2286.3157520742825, -458.0], [1238.5252504714317, -2348.1151445605874, -458.0], [1218.7540867143125, -2412.6695444264046, -458.0], [1205.7885870272330, -2479.2898744418044, -458.0], [1199.8445837855579, -2547.2567682796034, -458.0], [1201.0616779323555, -2615.8283365654506, -458.0], [1209.5008934934831, -2684.2482648228711, -458.0], [1225.1431942953986, -2751.7541549229400, -458.0], [1247.8888880628165, -2817.5860180441641, -458.0], [1277.5579332388879, -2880.9948245583341, -458.0], [1313.8911537717213, -2941.2510147217645, -458.0], [1356.5523568601766, -2997.6528735943302, -458.0], [1405.1313383651504, -3049.5346742469433, -458.0], [1459.1477503866354, -3096.2744950529313, -458.0], [1518.0557954988035, -3137.3016196803401, -458.0], [1581.2497024414315, -3172.1034322881037, -458.0], [1648.0699287986117, -3200.2317253434994, -458.0], [1717.8100274650860, -3221.3083433750735, -458.0], [1789.7241056097209, -3235.0300927949002, -458.0], [1863.0347974930028, -3241.1728555972841, -458.0], [1936.9416659709550, -3239.5948531878175, -458.0], [2010.6299419017123, -3230.2390157270929, -458.0], [2083.2795060367644, -3213.1344220900000, -458.0], [2154.0740143855037, -3188.3967857381358, -458.0], [2222.2100655401136, -3156.2279723681395, -458.0], [2286.9063070753928, -3116.9145460153441, -458.0], [2347.4123779192323, -3070.8253512395086, -458.0], [2403.0175845373378, -3018.4081499740096, -458.0], [2453.0592108881046, -2960.1853424577512, -458.0], [2496.9303653670759, -2896.7488122658515, -458.0], [2534.0872723469838, -2828.7539456887143, -458.0], [2564.0559213883316, -2756.9128854606574, -458.0], [2586.4379936943642, -2681.9870879935092, -458.0], [2600.9159928469344, -2604.7792617196592, -458.0], [2607.2575152100271, -2526.1247717908800, -458.0], [2605.3186045378934, -2446.8826031208228, -458.0], [2595.0461451775718, -2367.9259795167386, -458.0], [2576.4792587053053, -2290.1327413467034, -458.0], [2549.7496797689910, -2214.3755877704448, -458.0], [2515.0810982050698, -2141.5122919753908, -458.0], [2472.7874660323141, -2072.3759990682702, -458.0], [2423.2702795690966, -2007.7657162531514, -458.0], [2367.0148585430707, -1948.4371036695509, -458.0], [2304.5856555320461, -1895.0936717740133, -458.0], [2236.6206402604075, -1848.3784874434743, -458.0], [2163.8248140487558, -1808.8664860914209, -458.0], [2086.9629199498322, -1777.0574810641247, -458.0], [2006.8514236820083, -1753.3699544836327, -458.0], [1924.3498492789367, -1738.1357055983174, -458.0], [1840.3515613046729, -1731.5954236745138, -458.0], [1755.7740924425107, -1733.8952426093194, -458.0], [1671.5491211650842, -1745.0843238692350, -458.0], [1588.6122089600685, -1765.1135031766798, -458.0], [1507.8924101562989, -1793.8350246974387, -458.0], [1430.3018697207990, -1831.0033744552904, -458.0], [1356.7255254418342, -1876.2772124480034, -458.0], [1288.0110306554379, -1929.2223905986029, -458.0], [1224.9590121063429, -1989.3160313851563, -458.0], [1168.3137746660323, -2055.9516298909507, -458.0], [1118.7545604839306, -2128.4451302423190, -458.0], [1076.8874647597313, -2206.0419160884871, -458.0], [1043.2381037464802, -2287.9246440582883, -458.0], [1018.2451228915343, -2373.2218391267743, -458.0], [1002.2546242734734, -2461.0171616590669, -458.0], [995.51558278895936, -2550.3592476788326, -458.0], [998.17630998643472, -2640.2720167330926, -458.0], [1010.2820131459448, -2729.7653356838500, -458.0], [1031.7734852885660, -2817.8459219238503, -458.0], [1062.4869493937749, -2903.5283659551405, -458.0], [1102.1550673455495, -2985.8461510310790, -458.0], [1150.4091111582238, -3063.8625466818894, -458.0], [1206.7822809962072, -3136.6812534395649, -458.0], [1270.7141415432779, -3203.4566779541474, -458.0], [1341.5561355438567, -3263.4037209392436, -458.0], [1418.5781209749493, -3315.8069649729000, -458.0], [1500.9758664556302, -3360.0291550692482, -458.0], [1587.8794282963045, -3395.5188720684478, -458.0], [1678.3623221654670, -3421.8173071978540, -458.0], [1771.4513928269807, -3438.5640555486607, -458.0], [1866.1372768922247, -3445.5018565938831, -458.0], [1961.3853461386061, -3442.4802211337383, -458.0], [2056.1470127626926, -3429.4578960746312, -458.0], [2149.3712730376719, -3406.5041310968359, -458.0], [2240.0163622964810, -3373.7987244071769, -458.0], [2327.0613920128599, -3331.6308382614766, -458.0], [2409.5178390355159, -3280.3965886288433, -458.0], [2486.4407577644688, -3220.5954271034780, -458.0], [2556.9395882445442, -3152.8253467958793, -458.0], [2620.1884367744115, -3077.7769573005380, -458.0], [2675.4357106596362, -2996.2264867897075, -458.0], [2722.0129951281324, -2909.0277816745038, -458.0], [2759.3430681132813, -2817.1033859629638, -458.0], [2786.9469575171406, -2721.4347932931432, -458.0], [2804.4499556006976, -2623.0519745023876, -458.0], [2811.5865162066257, -2523.0222923916540, -458.0], [2808.2039724838160, -2422.4389229531866, -458.0], [2794.2650255251101, -2322.4089086557506, -458.0], [2769.8489677121397, -2224.0409743457940, -458.0], [2735.1516184380325, -2128.4332398594674, -458.0], [2690.4839640984046, -2036.6609655026466, -458.0], [2636.2695086458134, -1949.7644671081462, -458.0], [2573.0403554330660, -1868.7373364079153, -458.0], [2501.4320553649413, -1794.5150999623463, -458.0], [2422.1772703748302, -1727.9644458877051, -458.0], [2336.0983147842635, -1669.8731421509146, -458.0], [2244.0986500345589, -1620.9407633102790, -458.0], [2147.1534204521249, -1581.7703343391704, -458.0], [2046.2991289816382, -1552.8609906608558, -458.0], [1942.6225620616751, -1534.6017428445552, -458.0], [1837.2490819054419, -1527.2664226779161, -458.0], [1731.3304122748632, -1531.0098746633976, -458.0], [1626.0320503040984, -1545.8654435216986, -458.0], [1522.5204419591719, -1571.7437941698413, -458.0], [1421.9500622453143, -1608.4330860284008, -458.0], [1325.4505432480564, -1655.6005085619520, -458.0], [1234.1139934817129, -1712.7951698345037, -458.0], [1148.9826508101942, -1779.4523147346388, -458.0], [1071.0370083991711, -1854.8988345632679, -458.0], [1001.1845487796090, -1938.3600150482225, -458.0], [940.24921519179588, -2028.9674557182580, -458.0], [888.96174197699838, -2125.7680801034612, -458.0], [847.95095702745675, -2227.7341435530921, -458.0], [817.73615904663893, -2333.7741338379319, -458.0], [798.72066160225222, -2442.7444488360984, -458.0], [791.18658148430040, -2553.4617272282458, -458.0], [795.29094319020805, -2664.7156963402172, -458.0], [811.06312850768154, -2775.2824086367091, -458.0], [838.40379229494647, -2883.9376811177858, -458.0], [877.08495096260231, -2989.4707430021281, -458.0], [926.75242448753124, -3090.6973687667569, -458.0], [966.86873301128435, -3154.5484736118046, -458.0], [988.57878012722540, -3185.3839042261125, -458.0]]
)
spiral_cpts2=spiral_cpts+np.array([0.,0.,1000])

spiral_surf=Ruled(NURBSpline(spiral_cpts,knots=spiral_knots),NURBSpline(spiral_cpts2,knots=spiral_knots))
from mmcore.geom.evaluator import surface_evaluator
import numpy as np


def ellipsoid(u, v, a, b, c,x,y,z):

    return np.array([x+a * np.sin(u) * np.cos(v), y+b * np.sin(u) * np.sin(v),
                     z+ c * np.cos(u)])


from mmcore.geom.surfaces import Surface
from mmcore.geom.implicit import Implicit3D

from numpy._typing import NDArray
from math import pi


class Ellipsoid(Surface, Implicit3D):
    def __init__(self, a, b, c, origin=(0., 0., 0.)):
        self.origin = np.array(origin)
        self.a = a
        self.b = b
        self.c = c
        self._interval = (0., pi), (0., 2 * pi)
        super().__init__()

    def implicit(self, pt):
        return (pt[0] ** 2) / (self.a ** 2) + (pt[1] ** 2) / (self.b ** 2) + (pt[2] ** 2) / (self.c ** 2) - 1

    def interval(self):
        return self._interval

    def evaluate(self, uv) -> NDArray[float]:
        return ellipsoid(uv[0], uv[1], self.a, self.b, self.c,*self.origin)

    def evaluate_v2(self, u, v):
        return ellipsoid(u, v, self.a, self.b, self.c,*self.origin)

    def evaluate_multi(self, uv):
        return ellipsoid(uv[..., 0], uv[..., 1], self.a, self.b, self.c,*self.origin).T



el=Ellipsoid(1248/2,1542.8573/2,404.571442/2, np.array([943.943381, -2580.745513, 0



])
)


# #print(
#    patch1._rc,
# )
# import yappi
# yappi.set_clock_type("wall")  # Use set_clock_type("wall") for wall time
# yappi.start()

# yappi.stop()
# func_stats = yappi.get_func_stats()
# func_stats.save(f"{__file__.replace('.py', '')}_{int(time.time())}.pstat", type='pstat')

# tolerance checks



# nrm = [
#    np.all(
#        norm(
#            patch1(closest_points_on_surface(patch1, pts_crv_1)) - pts_crv_1
#        )
#    ),
#    np.all(
#        norm(
#            patch1(closest_points_on_surface(patch1, pts_crv_2)) - pts_crv_2
#        )
#    ),
#    np.all(
#        norm(
#            patch2(closest_points_on_surface(patch2, pts_crv_1)) - pts_crv_1
#        )
#    ),
#    np.all(
#        norm(
#            patch2(closest_points_on_surface(patch2, pts_crv_2)) - pts_crv_2
#        )
#    ),
# ]
##print(all(nrm))

#



import numpy as np
from scipy.optimize import fsolve, newton, minimize
from typing import List, Tuple, Callable


class SurfaceIntersection:
    def __init__(self, surface1: Callable, surface2: Callable, tol: float = 1e-6):
        self.surface1 = surface1
        self.surface2 = surface2
        self.tol = tol

    def find_starting_points(self, grid_size: int = 20) -> List[np.ndarray]:
        """
        Implement the plane vector field method to find starting points for all intersection curves.
        """
        starting_points = []
        u1_range, v1_range = self.surface1.domain()
        u2_range, v2_range = self.surface2.domain()

        # Create a grid over the parameter space of surface1
        u1_vals = np.linspace(u1_range[0], u1_range[1], grid_size)
        v1_vals = np.linspace(v1_range[0], v1_range[1], grid_size)

        for i in range(grid_size - 1):
            for j in range(grid_size - 1):
                # Define the corners of the current grid cell
                corners = [
                    (u1_vals[i], v1_vals[j]),
                    (u1_vals[i + 1], v1_vals[j]),
                    (u1_vals[i + 1], v1_vals[j + 1]),
                    (u1_vals[i], v1_vals[j + 1]),
                ]

                # Calculate the plane vector field at each corner
                vector_field = [self.calculate_vector_field(u, v) for u, v in corners]

                # Check for sign changes in the vector field
                if self.has_sign_change(vector_field):
                    # Refine the intersection point within this cell
                    point = self.refine_intersection_point(corners, vector_field)
                    if point is not None and not self.is_duplicate_point(
                        point, starting_points
                    ):
                        starting_points.append(point)

        return starting_points

    def calculate_vector_field(self, u: float, v: float) -> np.ndarray:
        """
        Calculate the plane vector field at a given point on surface1.
        """
        p1 = self.surface1(u, v)
        normal1 = self.surface1.normal(u, v)

        # Find the closest point on surface2
        def objective(vars):
            s, t = vars
            p2 = self.surface2(s, t)
            d = p2 - p1
            return np.linalg.norm(d)

        s2_range, t2_range = self.surface2.domain()
        initial_guess = [
            (s2_range[0] + s2_range[1]) / 2,
            (t2_range[0] + t2_range[1]) / 2,
        ]
        result = minimize(objective, initial_guess, bounds=self.surface2.domain())
        s, t = result.x

        p2 = self.surface2(s, t)
        normal2 = self.surface2.normal(s, t)

        # Calculate the vector field
        vector = np.cross(normal1, normal2)
        return vector / np.linalg.norm(vector)

    def has_sign_change(self, vector_field: List[np.ndarray]) -> bool:
        """
        Check if there's a sign change in the vector field across the cell corners.
        """
        signs = [np.sign(v[2]) for v in vector_field]  # Check the z-component
        return len(set(signs)) > 1

    def refine_intersection_point(
        self, corners: List[Tuple[float, float]], vector_field: List[np.ndarray]
    ) -> np.ndarray:
        """
        Refine the intersection point within the cell using Newton-Raphson method.
        """

        def equations(vars):
            u, v, s, t = vars
            p1 = self.surface1(u, v)
            p2 = self.surface2(s, t)
            d = p1 - p2
            return np.linalg.norm(d)

        # Use the center of the cell as the initial guess
        u_center = (corners[0][0] + corners[2][0]) / 2
        v_center = (corners[0][1] + corners[2][1]) / 2
        s2_range, t2_range = self.surface2.domain()
        s_center = (s2_range[0] + s2_range[1]) / 2
        t_center = (t2_range[0] + t2_range[1]) / 2

        initial_guess = [u_center, v_center, s_center, t_center]
        solution = minimize(
            equations,
            initial_guess,
            bounds=(*self.surface1.domain(), *self.surface2.domain()),
        )
        u, v, s, t = solution.x

        # Check if the solution is within the cell and the surfaces' domains
        if (
            corners[0][0] <= u <= corners[2][0]
            and corners[0][1] <= v <= corners[2][1]
            and s2_range[0] <= s <= s2_range[1]
            and t2_range[0] <= t <= t2_range[1]
        ):
            return self.surface1(u, v)
        else:
            return None

    def is_duplicate_point(self, point: np.ndarray, points: List[np.ndarray]) -> bool:
        """
        Check if the point is a duplicate of any existing points.
        """
        return any(np.linalg.norm(point - p) < self.tol for p in points)



# Example usage:
class Surface:
    def __init__(self, func, normal_func, domain):
        self.func = func
        self.normal_func = normal_func
        self._domain = domain

    def __call__(self, u, v):
        return self.func.evaluate(np.array([u, v]))

    def normal(self, u, v):
        return self.normal_func(u, v)

    def domain(self):
        return self._domain


def surface1_func(u, v):
    return np.array([u, v, u**2 + v**2])


def surface1_normal(u, v):
    return np.array([-2 * u, -2 * v, 1])


def surface2_func(u, v):
    return np.array([u, v, 1 - u**2 - v**2])


def surface2_normal(u, v):
    return np.array([2 * u, 2 * v, 1])


surface1 = Surface(
    spiral_surf,
    lambda u, v: np.cross(*spiral_surf.derivatives(np.array([u, v]))),
    spiral_surf.interval(),
)
surface2 = Surface(
    el,
    lambda u, v: np.cross(*el.derivatives(np.array([u, v]))),
    el.interval(),
)
intersection = SurfaceIntersection(surface1, surface2)
starting_points = intersection.find_starting_points()
print("Starting points:")
for point in starting_points:
    print(point)
print(np.array(starting_points).tolist())
