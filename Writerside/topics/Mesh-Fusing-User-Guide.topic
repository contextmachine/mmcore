<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Mesh Fusing User Guide" id="Mesh-Fusing-User-Guide">

    <chapter title="Fuse and write glTF" id="Mesh-Fusing-User-Guide-fuse-and-write-gltf">

        <p>The <code>union_mesh</code> function gives an ease to combine multiple 3D meshes into a single 3D mesh
            object, improving the
            rendering process, particularly when viewing 3D models in a web browser.</p>
        <p>A brief step-by-step guide on how to utilize this function would go like this:</p>

        <list type="none">
            <li>
                <control>Prepare the Mesh data</control>
                : Accumulate a list of Mesh objects that you wish to combine into a single Mesh object.
                <code-block lang="python">

                    import pickle

                    # Load test data (a collection of 18140 Mesh objects)
                    with open(&quot;tests/data/test_union_gltf_data.pkl&quot;, 'rb') as f:
                    meshes = pickle.load(f)

                </code-block>
            </li>


            <li>
                <control>Call the function</control>
                : Use the <code>union_mesh</code> function to combine the meshes. This function takes a list of Mesh
                objects and optional dictionary of additional attribute fields.
                <code-block lang="python">

                    from mmcore.geom.mesh.union import union_mesh

                    # Union the list of meshes into a single mesh
                    single_mesh = union_mesh(meshes)


                </code-block>
            </li>


            <li>
                <p>
                    <control>Result</control>
                    : The <code>union_mesh</code> function returns a single Mesh namedtuple object which includes
                    combined attributes,
                    indices and extras from the provided list of input Mesh objects.
                </p>
            </li>
            <li>
                <p>
                    <control>Convert to glTF</control>
                    : Optionally, you may wish to convert the combined mesh into glTF format for further use, for
                    instance rendering in a web browser-based 3D engine. You can utilize
                    <code>create_union_mesh_node</code> to convert your mesh
                    into a node, then <code>asscene</code> to create a full glTF Scene from the node.
                </p>
                <code-block lang="python">

                    from mmcore.compat.gltf.convert import create_union_mesh_node, asscene

                    # Create a GLTF SceneNode from the fused mesh
                    scene_node = create_union_mesh_node(single_mesh, &quot;mesh_node&quot;)
                    scene = asscene(scene_node) # create GLTF Scene from SceneNode


                </code-block>
            </li>


            <li>
                <control>Save as glTF file</control>
                : The resulting glTF Scene object can be serialized into a glTF file using a JSON dump
                operation. This generates a single glTF file <code>single_mesh.gltf</code> of the fused mesh.
                <code-block lang="python">

                    # Dump the scene as a glTF file
                    with open('single_mesh.gltf', 'w') as f:
                    ujson.dump(scene.todict(), f)


                </code-block>
            </li>

        </list>


        <chapter title="Conclusion">
            <p>Now you know how to merge 3d meshes and write them to common formats. You can open the resulting file in
                almost any application, such as Blender, or Three.js Editor in your browser. You can also see the
                complete
                example code below:</p>
            <code-block collapsed-title="Follow compete code" lang="python" collapsible="true">
                import pickle

                # Load test data (a collection of 18140 Mesh objects)
                with open(&quot;tests/data/test_union_gltf_data.pkl&quot;, 'rb') as f:
                meshes = pickle.load(f)
            </code-block>
        </chapter>

    </chapter>

</topic>