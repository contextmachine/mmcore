#!/usr/bin/python3
# You need use `eval "$(bin/load_dotenv .env)"` to use it in your shell script.
import subprocess as sp
import sys
import warnings

esc = '\033[0m'
red = '\x1b[1;36m'
green = '\033[0;35m'

description = "\n\nLoad env to your shell from .env like file, or files."
_usage = "Help.\n\t\t./load_dotenv -h/--help\n\n\tYou should be use this program with `eval` command, " \
         "like:\n\n\t\teval $(./load_dotenv <file1> <file2> ...)\n\t\teval $(./load_dotenv myenv1.env myenv2.env)" \
         "\n\n\tIf no argument is passed, it looks for a '.env' file in the current directory. \n\t" \
         "\n\t\teval $(./load_dotenv)\n\n\tLiterally the following will happen (python): `dotenv.find_dotenv('.env', " \
         "usecwd=True)`\n\n".replace('eval', '{red}eval{esc}', -1).replace('./load_dotenv', '{green}./load_dotenv{'
                                                                                            'esc}', -1)


usage = eval(f"f\"\"\"{_usage}\"\"\"")


class MyLiteral:
    def __class_getitem__(cls, parameters):
        return cls(*parameters)

    def __init__(self, *parameters):
        self._parameters = parameters

    def __contains__(self, other):
        ans = False
        for i in self._parameters:
            if i in other:
                ans = True
                break
            else:
                continue
        return ans

    def __repr__(self):
        return f"{self.__class__.__name__}[{', '.join(self._parameters)}]"


def main(args):
    try:
        import dotenv
    except ImportError as err:

        proc = sp.Popen(
                ["/usr/bin/python3", "-m", "pip", "install", "--upgrade", "--no-warn-script-location", "python-dotenv"])
        proc.wait(timeout=600)
        import dotenv
    except Exception as err:
        raise err

    # print(args)
    for arg in args:

        if arg:

            for k, v in dotenv.dotenv_values(dotenv.find_dotenv(filename=arg, usecwd=True)).items():
                print(f"export {k}={v}")

                # sys.stdin.write(f"export {k}={v}")

    return 0


if __name__ == "__main__":
    if sys.argv[1:] in MyLiteral['-h', '--help']:
        print(f"{description}\n\nUSAGE:\n\t{usage}\n")
        warnings.simplefilter("ignore")
    else:
        main(sys.argv[1:])
