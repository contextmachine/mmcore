name: Build and upload to PyPI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:

      - dev
  release:
    types:
      - published

jobs:
  build:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # macos-13 is an intel runner, macos-14 is apple silicon
        os: [ ubuntu-latest, windows-latest, macos-13, macos-14 ]

    steps:
      - uses: actions/checkout@v4
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-pip-wheels
        uses: actions/cache@v3
        with:
          path: ~/.cache
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ steps.extract_branch.outputs.branch }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: poetry install --no-interaction --no-root
      - name: Install library
        run: poetry install --no-interaction
      - name: Poetry build
        run: |
          source $VENV
          poetry build

      - uses: actions/upload-artifact@v4
        with:
          name: mmcore-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: dist/*.whl

      - uses: actions/upload-artifact@v4
        with:
          name: mmcore-sdist-${{ matrix.os }}-${{ strategy.job-index }}
          path: dist/*.tar.gz




  upload_pypi:
    needs: [ build ]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: mmcore-*
          path: dist
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/